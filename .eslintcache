[{"D:\\SEI1019\\unit_three\\react-pokedex\\src\\index.js":"1","D:\\SEI1019\\unit_three\\react-pokedex\\src\\App.js":"2","D:\\SEI1019\\unit_three\\react-pokedex\\src\\reportWebVitals.js":"3","D:\\SEI1019\\unit_three\\react-pokedex\\src\\components\\Pokedex.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":207,"mtime":1607633511008,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":816,"mtime":1607637347910,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j2u73l",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\SEI1019\\unit_three\\react-pokedex\\src\\index.js",[],"D:\\SEI1019\\unit_three\\react-pokedex\\src\\App.js",["18"],"D:\\SEI1019\\unit_three\\react-pokedex\\src\\reportWebVitals.js",[],"D:\\SEI1019\\unit_three\\react-pokedex\\src\\components\\Pokedex.js",["19","20"],{"ruleId":"21","severity":1,"message":"22","line":1,"column":8,"nodeType":"23","messageId":"24","endLine":1,"endColumn":12},{"ruleId":"25","severity":1,"message":"26","line":8,"column":3,"nodeType":"23","endLine":8,"endColumn":12,"suggestions":"27"},{"ruleId":"25","severity":1,"message":"28","line":8,"column":13,"nodeType":"29","endLine":23,"endColumn":4},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPokemon'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [pokeName] as a second argument to the useEffect Hook.",["30"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",{"desc":"31","fix":"32"},"Add dependencies array: [pokeName]",{"range":"33","text":"34"},[553,553],", [pokeName]"]